<?xml version="1.0" encoding="utf-8"?>
<topic id="3a04061c-5bf3-4ebd-a084-cf60e7f7a13a" revisionNumber="1">
	<developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
		<introduction>
			<para>Sequences is a port of Scala's <externalLink>
        <linkText>Stream[+A]</linkText>
        <linkUri>http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Stream</linkUri>
      </externalLink> to C#.</para>

      <para>
        Sequences is available on
        <externalLink>
          <linkText>NuGet</linkText>
          <linkUri>https://www.nuget.org/packages/Sequences</linkUri>
        </externalLink>
        and the source code is on
        <externalLink>
          <linkText>GitHub</linkText>
          <linkUri>https://github.com/dcastro/Sequences</linkUri>
        </externalLink>
        
      </para>
		</introduction>

		<section>
			<title>Intro</title>
			<content>

        <para>
          A <codeEntityReference>T:Sequences.Sequence`1</codeEntityReference> is an immutable lazy list whose elements are only evaluated when they are needed.
          A sequence is composed by a <legacyItalic>head</legacyItalic> (the first element) and a lazily-evaluated <legacyItalic>tail</legacyItalic> (the remaining elements).
        </para>
        <para>
          The fact that the tail is lazily-evaluated, makes it easy to represent infinite series or sets. For example, here's how to represent the set of all natural numbers.
        </para>

        <code language="cs" title="Natural numbers">
          <![CDATA[
            public ISequence<int> Naturals(int start)
            {
                return new Sequence<int>( head: start,
                                          tail: () => Naturals(start + 1));
            }

            var naturals = Naturals(1);

            //take the first 5 natural numbers
            naturals.Take(5).ForEach(Console.Write); //prints 12345]]>
        </code>

        <para>
          Or, even simpler:
        </para>

        <code language="cs" title="Natural numbers">
        <![CDATA[
          var naturals = Sequence.From(1);]]>
        </code>

        <para>
        Sequences also features memoization, i.e., the sequence stores previously computed values to avoid re-evaluation.
        </para>

        <code language="cs" title="Memoizing odd numbers">
          <![CDATA[
            //start with number 1, and then keep adding 2 to the previous number
            var odds = Sequence.Iterate(1, odd =>
                {
                    Console.WriteLine("Adding " + odd + " + 2");
                    return odd + 2;
                });

            odds.Take(3).ForEach(Console.WriteLine);
            odds.Take(5).ForEach(Console.WriteLine);

            //prints
            //1
            //Adding 1 + 2
            //3
            //Adding 3 + 2
            //5

            //and then
            //1
            //3
            //5
            //Adding 5 + 2
            //7
            //Adding 7 + 2
            //9]]>
        </code>

        <para>
          You can iterate through an infinite sequence for as long as you want.
          As long as you don't hold onto its head, each sequence will be elected for garbage collection as soon as you move to the next value.
          This prevents an infinite sequence from occupying a large and growing ammount of memory.
        </para>

        <code language="cs" title="Continuous garbage collection">
          <![CDATA[
            foreach (var odd in Sequence.Iterate(1, odd => odd + 2))
            {
                //when you move to Sequence(11, ?),
                //the previous Sequence(9, ?) is elected for collection.
            }]]>
        </code>
			
    </content>
		</section>

    <relatedTopics>
      <link xlink:href="d926337d-29d9-4fba-96a3-080e2a7f31e2"/>
      <link xlink:href="f9e21197-e60e-4af1-9c38-c4ed4498ac04" />

      <codeEntityReference>T:Sequences.ISequence`1</codeEntityReference>
      <codeEntityReference>T:Sequences.Sequence</codeEntityReference>
    </relatedTopics>
	</developerConceptualDocument>
</topic>
