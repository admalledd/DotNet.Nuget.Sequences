<?xml version="1.0" encoding="utf-8"?>
<topic id="3a04061c-5bf3-4ebd-a084-cf60e7f7a13a" revisionNumber="1">
	<developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
		<introduction>
			<para>Sequences is a port of Scala's <externalLink>
        <linkText>Stream[+A]</linkText>
        <linkUri>http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Stream</linkUri>
      </externalLink> to C#.</para>
		</introduction>

		<section>
			<title>Intro</title>
			<content>

        <para>
          A <codeEntityReference>T:Sequences.Sequence`1</codeEntityReference> is an immutable lazy list whose elements are only evaluated when they are needed.
          A sequence is composed by a <legacyItalic>head</legacyItalic> (the first element) and a lazily-evaluated <legacyItalic>tail</legacyItalic> (the remaining elements).
        </para>
        <para>
          The fact that the tail is lazily-evaluated, makes it easy to represent infinite series or sets. For example, here's how to represent the set of all natural numbers.
        </para>

        <code language="cs" title="Natural numbers">
          <![CDATA[
            public ISequence<int> Naturals(int start)
            {
                return new Sequence<int>( head: start,
                                          tail: () => Naturals(start + 1));
            }

            var naturals = Naturals(1);

            //take the first 5 natural numbers
            naturals.Take(5).ForEach(Console.Write); //prints 12345]]>
        </code>

        <para>
          Or, even simpler:
        </para>

        <code language="cs" title="Natural numbers">
        <![CDATA[
          var naturals = Sequence.From(1);]]>
        </code>

        <para>
        Sequences also features memoization, i.e., the sequence stores previously computed values to avoid re-evaluation.
        </para>

        <code language="cs" title="Memoizing odd numbers">
          <![CDATA[
            //start with number 1, and then keep adding 2 to the previous number
            var odds = Sequence.Iterate(1, odd =>
                {
                    Console.WriteLine("Adding " + odd + " + 2");
                    return odd + 2;
                });

            odds.Take(3).ForEach(Console.WriteLine);
            odds.Take(5).ForEach(Console.WriteLine);

            //prints
            //1
            //Adding 1 + 2
            //3
            //Adding 3 + 2
            //5

            //and then
            //1
            //3
            //5
            //Adding 5 + 2
            //7
            //Adding 7 + 2
            //9]]>
        </code>

        <para>
          You can iterate through an infinite sequence for as long as you want.
          As long as you don't hold onto its head, each sequence will be elected for garbage collection as soon as you move to the next value.
          This prevents an infinite sequence from occupying a large and growing ammount of memory.
        </para>

        <code language="cs" title="Continuous garbage collection">
          <![CDATA[
            foreach (var odd in Sequence.Iterate(1, odd => odd + 2))
            {
                //when you move to Sequence(11, ?),
                //the previous Sequence(9, ?) is elected for collection.
            }]]>
        </code>
        

        <para>To get started, add a documentation source to the project (a Visual Studio solution, project, or
assembly and XML comments file).  See the <legacyBold>Getting Started</legacyBold> topics in the Sandcastle Help
File Builder's help file for more information.  The following default items are included in this project:</para>

				<list class="bullet">
					<listItem>
						<para><localUri>ContentLayout.content</localUri> - Use the content layout file to manage the
conceptual content in the project and define its layout in the table of contents.</para>
					</listItem>

					<listItem>
						<para>The <localUri>.\Media</localUri> folder - Place images in this folder that you will reference
from conceptual content using <codeInline>medialLink</codeInline> or <codeInline>mediaLinkInline</codeInline>
elements.  If you will not have any images in the file, you may remove this folder.</para>
					</listItem>

					<listItem>
						<para>The <localUri>.\icons</localUri> folder - This contains a default logo for the help file.  You
may replace it or remove it and the folder if not wanted.  If removed or if you change the file name, update
the <ui>Transform Args</ui> project properties page by removing or changing the filename in the
<codeInline>logoFile</codeInline> transform argument.  Note that unlike images referenced from conceptual topics,
the logo file should have its <legacyBold>BuildAction</legacyBold> property set to <codeInline>Content</codeInline>.</para>
					</listItem>

					<listItem>
						<para>The <localUri>.\Content</localUri> folder - Use this to store your conceptual topics.  You may
name the files and organize them however you like.  One suggestion is to lay the files out on disk as you have
them in the content layout file as shown in this project but the choice is yours.  Files can be added via the
Solution Explorer or from within the content layout file editor.  Files must appear in the content layout file
in order to be compiled into the help file.</para>
					</listItem>
				</list>

				<para>See the <legacyBold>Conceptual Content</legacyBold> topics in the Sandcastle Help File Builder's
help file for more information.  See the <legacyBold> Sandcastle MAML Guide</legacyBold> for details on Microsoft
Assistance Markup Language (MAML) which is used to create these topics.</para>
			
    </content>
		</section>

    <relatedTopics>
      <link xlink:href="f9e21197-e60e-4af1-9c38-c4ed4498ac04" />
      <link xlink:href="d926337d-29d9-4fba-96a3-080e2a7f31e2"/>
    </relatedTopics>
	</developerConceptualDocument>
</topic>
